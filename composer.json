{
  "name": "brianhenryie/bh-wp-autologin-urls",
  "description": "Adds single-use passwords to emails to WordPress users.",
  "type": "wordpress-plugin",
  "license": "GPL-2.0+-or-later",
  "authors": [
    {
      "name": "Brian Henry",
      "email": "BrianHenryIE@gmail.com"
    }
  ],
  "minimum-stability": "dev",
  "prefer-stable": true,
  "config": {
    "process-timeout": 0,
    "sort-packages": true,
    "allow-plugins": {
      "dealerdirect/phpcodesniffer-composer-installer": true,
      "composer/installers": true,
      "phpstan/extension-installer": true,
      "cweagans/composer-patches": true
    }
  },
  "repositories": [
    {
      "type": "path",
      "url": "../bh-wp-logger"
    },
    {
      "type": "path",
      "url": "../bh-wp-private-uploads"
    },
    {
      "url": "https://github.com/BrianHenryIE/composer-phpstorm",
      "type": "git"
    },
    {
      "url": "https://github.com/WordPress/wordpress-develop",
      "type": "git"
    },
    {
      "url": "https://github.com/BrianHenryIE/admin-notices",
      "type": "git"
    },
    {
      "type":"composer",
      "url":"https://wpackagist.org"
    }
  ],
  "require": {
    "brianhenryie/bh-wp-logger": "dev-master",
    "php": ">=7.4",
    "pablo-sg-pacheco/wp-namespace-autoloader": "dev-master"
  },
  "require-dev": {
    "10up/wp_mock": "0.4.2",
    "antecedent/patchwork": "^2.1",
    "brianhenryie/color-logger": "^1.0",
    "brianhenryie/composer-phpstorm": "dev-master",
    "brianhenryie/strauss": "*",
    "codeception/module-asserts": "^1.0",
    "codeception/module-cli": "^1.0",
    "codeception/module-db": "^1.0.0",
    "codeception/module-filesystem": "^1.0",
    "codeception/module-phpbrowser": "^1.0.0",
    "codeception/module-webdriver": "^1.0",
    "codeception/util-universalframework": "^1.0",
    "cweagans/composer-patches": "*",
    "dealerdirect/phpcodesniffer-composer-installer": "*",
    "hoa/console": "^3.17",
    "jaschilz/php-coverage-badger": "^2.0",
    "kporras07/composer-symlinks": "dev-master",
    "lucatume/wp-browser": "*",
    "php-stubs/woocommerce-stubs": "^5.2",
    "phpcompatibility/phpcompatibility-wp": "*",
    "phpstan/extension-installer": "^1.1",
    "phpunit/phpcov": "*",
    "squizlabs/php_codesniffer": "*",
    "szepeviktor/phpstan-wordpress": "^0.7.2",
    "voku/portable-ascii": "dev-master",
    "woocommerce/woocommerce-sniffs": "^0.1.1",
    "wordpress/wordpress": "*",
    "wp-cli/dist-archive-command": "dev-master",
    "wp-cli/wp-cli-bundle": "*",
    "wp-coding-standards/wpcs": "*  ",
    "wpackagist-plugin/woocommerce": "*",
    "wpackagist-plugin/wp-mail-logging": "*",
    "wpackagist-theme/storefront": "*",
    "ericmartel/codeception-email-mailtrap": "^1.0",
    "ext-dom": "*",
    "mheap/phpunit-github-actions-printer": "dev-master",
    "wpackagist-plugin/wp-super-cache": "*",
    "wpackagist-plugin/wp-mail-smtp": "*",
    "wpackagist-theme/twentytwenty": "*",
    "wpackagist-plugin/newsletter": "*",
    "wpackagist-plugin/mailpoet": "*"
  },
  "extra": {
    "patches": {
      "jaschilz/php-coverage-badger": {
        "Allow customising the text": "https://github.com/JASchilz/PHPCoverageBadge/pull/1.patch"
      },
      "10up/wp_mock": {
        "Add AnyObject matcher": "https://github.com/10up/wp_mock/pull/161.patch"
      },
      "ericmartel/codeception-email-mailtrap": {
        "Fixed undefined property ": "https://github.com/ericmartel/codeception-email-mailtrap/pull/7.patch"
      }
    },
    "strauss": {
      "namespace_prefix": "BrianHenryIE\\WP_Autologin_URLs\\",
      "target_directory": "/src/strauss/",
      "classmap_prefix": "BH_WP_Autologin_URLs_",
      "namespace_replacement_patterns": {
        "~BrianHenryIE\\\\(.*)~" : "BrianHenryIE\\WP_Autologin_URLs\\\\$1"
      },
      "exclude_from_copy": {
        "file_patterns": [
          "~psr/log/Psr/Log/Test.*~"
        ]
      }
      },
    "symlinks": {
      "src": "wp-content/plugins/bh-wp-autologin-urls",
      "wp-content": "wordpress/wp-content"
    },
    "phpstorm": {
      "exclude_folders": {
        "folders": [
          "vendor/php-stubs/woocommerce-stubs",
          "vendor/wordpress/wordpress/src",
          "vendor/wordpress/wordpress/build",
          "wp-content/plugins/bh-wp-autologin-urls",
          "wordpress/wp-content"
        ],
        "include_folders": [
          "vendor/wordpress/wordpress/"
        ],
        "composer-symlinks": false
      }
    }
  },
  "scripts": {
    "post-install-cmd": [
      "vendor/bin/strauss",
      "vendor/bin/wp core download --path=wordpress --allow-root || true;",
      "export $(grep -v '^#' .env.testing | xargs); vendor/bin/wp config create --dbname=$TEST_SITE_DB_NAME --dbuser=$TEST_SITE_DB_USER --dbpass=$TEST_SITE_DB_PASSWORD --allow-root --extra-php=\"\n//define( 'WP_DEBUG', true ); \ndefine( 'WP_DEBUG_LOG', true );\ndefine( 'SCRIPT_DEBUG', true );\" || true",
      "Kporras07\\ComposerSymlinks\\ScriptHandler::createSymlinks",
      "mkdir -p wordpress/wp-content/uploads",
      "BrianHenryIE\\ComposerPhpStorm\\ExcludeFolders::update",
      "BrianHenryIE\\ComposerPhpStorm\\PHPUnitRunConfigurations::update"
    ],
    "post-update-cmd": [
      "vendor/bin/strauss",
      "vendor/bin/wp core download --path=wordpress --allow-root || true; wp core update --allow-root || true",
      "export $(grep -v '^#' .env.testing | xargs); vendor/bin/wp config create --dbname=$TEST_SITE_DB_NAME --dbuser=$TEST_SITE_DB_USER --dbpass=$TEST_SITE_DB_PASSWORD --allow-root --extra-php=\"\n//define( 'WP_DEBUG', true ); \ndefine( 'WP_DEBUG_LOG', true );\ndefine( 'SCRIPT_DEBUG', true );\" || true",
      "Kporras07\\ComposerSymlinks\\ScriptHandler::createSymlinks",
      "mkdir -p wordpress/wp-content/uploads",
      "BrianHenryIE\\ComposerPhpStorm\\ExcludeFolders::update",
      "BrianHenryIE\\ComposerPhpStorm\\PHPUnitRunConfigurations::update"
    ],
    "save-acceptance-database": [
      "export $(grep -v '^#' .env.testing | xargs); mysqldump -u $TEST_SITE_DB_USER -p$TEST_SITE_DB_PASSWORD  $TEST_SITE_DB_NAME > tests/_data/dump.sql;"
    ],
    "coverage-tests": [
      "vendor/bin/codecept run unit --coverage unit.cov",
      "vendor/bin/codecept run wpunit --coverage wpunit.cov",
      "vendor/bin/phpcov merge --clover tests/_output/clover.xml --html tests/_output/html tests/_output;",
      "open tests/_output/html/index.html"
    ],
    "lint": [
      "vendor/bin/phpcbf || true",
      "vendor/bin/phpcs || true",
      "vendor/bin/phpstan analyse --memory-limit 1G"
    ],
    "lint-changes": [
      "updated_files=$( git status | grep 'modified:\\s.*.php$' | cut -c14- | awk '{ printf(\"%s \", $0) }' ); vendor/bin/phpcbf $(echo $updated_files); vendor/bin/phpcs $(echo $updated_files); vendor/bin/phpstan analyse $(echo $updated_files) --memory-limit 1G"
    ],
    "create-plugin-archive": [
      "vendor/bin/wp dist-archive src --plugin-dirname=$(basename \"$PWD\")"
    ]
  }
}
