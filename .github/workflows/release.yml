name: Build and attach releases

# for now, release name must match exactly the plugin base file's version.

on:
  release:
    types: [published]


jobs:
  release:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        php: [ '7.4' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: master

#      - name: Check the readme for updated changelog
#        run: |
#          $LOGTEXT="= ${{  github.ref_name }} ="
#          echo "::debug Checking `readme.txt` for string \"$LOGTEXT\""
#          if [[ $(grep "$LOGTEXT" readme.txt) ]]; then echo "::info Updated changelog found"; else echo "::error No changelog found for ${{  github.ref_name }}"; exit 1; fi

      - name: Install PHP
        uses: shivammathur/setup-php@2.11.0
        with:
          php-version: ${{ matrix.php }}
          tools: composer, cs2pr
          extensions: zip

      - name: Update environment config for GitHub Actions
        env:
          PLUGIN_SLUG: ${{ github.event.repository.name }}
        run: |
          find . -depth \( -name '.env.testing' \) -exec sed -i "s/TEST_SITE_DB_HOST=\"127.0.0.1\"/TEST_SITE_DB_HOST=\"127.0.0.1:${{ job.services.mysql.ports['3306'] }}\"/g" {} +
          find . -depth \( -name '.env.testing' -o -name '*.cest' \) -exec sed -i "s/localhost:8080\/${{ env.PLUGIN_SLUG }}/localhost:8080/g" {} +
          find . -depth \( -name 'dump.sql' \) -exec sed -i "s/localhost:8080\/${{ env.PLUGIN_SLUG }}/localhost:8080/g" {} +

      - name: Read .env.testing
        uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: .env.testing

      - name: Configure MySQL
        run: |
          mysql -h 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -u root -ppassword -e "CREATE USER '"$TEST_DB_USER"'@'%' IDENTIFIED WITH mysql_native_password BY '"$TEST_DB_PASSWORD"';";
          mysql -h 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -u root -ppassword -e "CREATE DATABASE "$TEST_SITE_DB_NAME"; USE "$TEST_SITE_DB_NAME"; GRANT ALL PRIVILEGES ON "$TEST_SITE_DB_NAME".* TO '"$TEST_DB_USER"'@'%';";
          mysql -h 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -u root -ppassword -e "CREATE DATABASE "$TEST_DB_NAME"; USE "$TEST_DB_NAME"; GRANT ALL PRIVILEGES ON "$TEST_DB_NAME".* TO '"$TEST_DB_USER"'@'%';";

      - name: Run composer install
        continue-on-error: true
        run: composer install

      - name: Create wpconfig ... the composer.json creation didn't work
        run: |
          export $(grep -v '^#' .env.testing | xargs);
          sudo vendor/bin/wp config create --dbname=$TEST_SITE_DB_NAME --dbuser=$TEST_SITE_DB_USER --dbpass=$TEST_SITE_DB_PASSWORD --dbhost=127.0.0.1:${{ job.services.mysql.ports['3306'] }} --allow-root --extra-php="define( 'WP_DEBUG', true ); define( 'WP_DEBUG_LOG', true );"

      - name: Create plugin archive
        id: create-plugin-archive
        run: |
          composer create-plugin-archive
          echo "DIST_ARCHIVE_ABSOLUTE_FILEPATH=$(pwd)/$(ls -Art dist-archive/*.zip | tail -n 1)" >> $GITHUB_OUTPUT;

      - uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: ${{ steps.create-plugin-archive.outputs.DIST_ARCHIVE_ABSOLUTE_FILEPATH }}
          gzip: false
          allow_override: true

      - name: Unzip release archive for SVN deployment
        run: unzip ${{ steps.create-plugin-archive.outputs.DIST_ARCHIVE_ABSOLUTE_FILEPATH }}

      - name: WordPress Plugin Deploy
        uses: 10up/action-wordpress-plugin-deploy@stable
        env:
          SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}
          SVN_USERNAME: ${{ secrets.SVN_USERNAME }}
          BUILD_DIR: ./${{ env.PLUGIN_SLUG }}
